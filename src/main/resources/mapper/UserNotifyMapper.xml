<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.UserNotifyMapper">

    <select id="selectUnread" resultType="entity.UserNotifyEntity">
        select *
        from user_notify
        where user_id = #{id}
          and is_read = 0
    </select>

    <select id="selectOne" resultType="entity.UserNotifyEntity">
        SELECT *
        FROM user_notify
        where user_notify_id = #{id}
    </select>

    <select id="selectAll" resultType="entity.UserNotifyEntity">
        SELECT *
        FROM user_notify
    </select>

    <insert id="save" parameterType="entity.UserNotifyEntity"
            useGeneratedKeys="true" keyProperty="userNotifyId" keyColumn="user_notify_id">
        insert into user_notify (user_notify_id, user_id, notify_id, is_read)
        values (#{userNotifyId}, #{userId}, #{notifyId}, #{isRead})
    </insert>

    <update id="update">
        update user_notify
        set user_id   = #{userId},
            notify_id = #{notifyId},
            is_read   = #{isRead}
        where user_notify_id = #{is}
    </update>

    <delete id="delete">
        delete
        from user_notify
        where user_notify_id = #{id}
    </delete>

    <select id="select" resultMap="notifyDTO">
        select user_notify_id as id,
               user_id        as userId,
               n.notify_id    as notifyId,
               notify_content as content,
               notify_time    as time,
               notify_type    as type,
               un.is_read     as isRead
        from notify n,
             user_notify un
        where un.user_id = #{id}
          and n.notify_id = un.notify_id
    </select>

    <select id="selectLimit" resultMap="notifyDTO">
        select user_notify_id as id,
               user_id        as userId,
               n.notify_id    as notifyId,
               notify_content as content,
               notify_time    as time,
               notify_type    as type,
               un.is_read     as isRead
        from notify n,
             user_notify un
        where un.user_id = #{id}
          and n.notify_id = un.notify_id
        limit #{start}, #{offset}
    </select>

    <select id="getCount" resultType="Long">
        select count(*)
        from notify n,
             user_notify un
        where un.user_id = #{id}
          and n.notify_id = un.notify_id
    </select>

    <resultMap id="notifyDTO" type="dto.NotifyDTO">
        <id column="id" property="id"/>
        <result column="userId" property="userId"/>
        <result column="notifyId" property="notifyId"/>
        <result column="content" property="content"/>
        <result column="time" property="time"/>
        <result column="type" property="type"/>
        <result column="isRead" property="isRead"/>
    </resultMap>

</mapper>